<?phpclass product extends MY_Controller{    public function __construct(){        parent::__construct();        $this->_data['now'] = 'Dự Án';        $this->load->model('mproduct');        $user = $this->session->userdata('user');        if(!$user || $user['user_type'] != 'administrator'){            redirect(base_url()."admin/login");        }        $this->form_validation->CI =& $this;                //url upload        $this->_gallery_url = base_url()."public/product/";        //đường dẫn vật lý        $this->_gallery_path = realpath(APPPATH. "../public/product");    }    public function listall(){        if(!isset($_GET['per_page'])){            $start = 0 ;        }else{            $start=$_GET['per_page'];        }        if(!isset($_GET['s'])){            $s = '' ;        }else{            $s=$_GET['s'];        }        $this->_data['s'] = $s;        $this->load->library('pagination');        $config['base_url'] = base_url().'admin/product/listall?s='.$s;        //config phân trang        $config['total_rows'] = $this->mproduct->numRows($s);        $config['per_page'] =15;        $config['uri_segment'] = 4;        $config['cur_tag_open'] = "<li><a><font color='black'>";        $config['cur_tag_close'] = '</font></a></li>';        $config['num_tag_open'] = '<li>';        $config['num_tag_close'] = '</li>';        $config['prev_link'] = 'Prev';        $config['prev_tag_open'] = '<li>';        $config['prev_tag_close'] = '</li>';        $config['next_link'] = 'Next';        $config['next_tag_open'] = '<li>';        $config['next_tag_close'] = '</li>';        $config['first_tag_open'] = '<li>';        $config['first_tag_close'] = '</li>';        $config['last_tag_open'] = '<li>';        $config['last_tag_close'] = '</li>';        $this->pagination->initialize($config);        $this->_data['pagination']=$this->pagination->create_links();        $this->_data['template'] = 'admin/product/list_view';        $this->_data['title'] = 'Trang ';        $this->_data['info'] = $this->mproduct->listAll($config['per_page'],$start,$s);        $this->load->view("layout/admin",$this->_data);    }        private function addAttribute($product_id) {        $this->load->library("upload");        $path = $this->_gallery_path.'/'.$product_id;        $config = array(            'upload_path'   => $path,            'allowed_types' => 'gif|jpg|png|jpeg',            'max_size'      => '2000'        );        $this->upload->initialize($config);        if(!is_dir($path)) //create the folder if it's not already exists        {            mkdir($path,0777,TRUE);            mkdir($path.'/thumbnail',0777,TRUE);        }        //----------------        if(!$this->upload->do_multi_upload("images")){                                        } else {            $data =$this->upload->get_multi_upload_data();             $images  = array();            foreach($data as $val){                $images[] = $val['file_name'];                $this->_create_thumb($val['file_name'],$path);            }            $data_images = json_encode($images);           }        $arr = array(            'image' => $data_images        );        $this->mproduct->editById($product_id, $arr);    }        public function add(){        $this->_data['action'] = strtolower(__FUNCTION__);        if(isset($_POST['ok'])){            $this->form_validation->set_rules("link","Link","callback_check_link");            $time = strtotime($this->input->post('date_update').' '.$this->input->post('time_update'));            if($this->form_validation->run()==TRUE){                $arr = array(                    'name' => $this->input->post('name'),                    'keyword' => $this->input->post('keyword'),                    'info' => $this->input->post('info'),                    'link' => $this->input->post('link'),                    'content' => $this->input->post('content'),                    'is_copy' => '',                    'created' => $time,                    'updated' => $time,                );                $product_id = $this->mproduct->add($arr);                $this->addAttribute($product_id);                if($_POST['ok']=='back'){                    $this->session->set_flashdata('ses_flash',"Thêm");                    redirect(base_url()."admin/product/listall");                }else{                    redirect(base_url()."admin/product/edit/".$product_id);                }            }            $arr = array(                'name' => $this->input->post('name'),                'keyword' => $this->input->post('keyword'),                'info' => $this->input->post('info'),                'link' => $this->input->post('link'),                'content' => $this->input->post('content'),                'is_copy' => '',                'created' => $time,                'updated' => $time,            );            $this->_data['info'] = $arr;        }        $this->_data['template'] = 'admin/product/modify_view';        $this->_data['title'] = 'Trang Thêm  ';        $this->load->view("layout/admin",$this->_data);    }        public function check_link($link){        if($this->mproduct->checkLink($link)==false){            $this->form_validation->set_message("check_link","Tên sản phẩm đã được sử dụng .");            return false;        }else{            return true;        }    }    public function check_masp($link){        if($this->mproduct->checkMasp($link)==false){            $this->form_validation->set_message("check_masp","Mã sản phẩm đã được sử dụng .");            return false;        }else{            return true;        }    }    public function del($id){        $this->mproduct->del($id);        $path = $this->_gallery_path.'/'.$id;        $this->deleteDir($path);        $this->session->set_flashdata('ses_flash',"Xóa");        redirect(base_url()."admin/product/listall");    }    public function dellist(){        foreach($_POST['del'] as $id){            $this->mproduct->del($id);            $path = $this->_gallery_path.'/'.$id;            $this->deleteDir($path);        }        $this->session->set_flashdata('ses_flash',"Xóa");        redirect(base_url()."admin/product/listall");    }    public function edit($id){        $this->_data['action'] = strtolower(__FUNCTION__);        $this->_data['info'] = $this->mproduct->getById($id);        $info = $this->_data['info'];        if(isset($_POST['ok'])){            $time = strtotime($this->input->post('date_update').' '.$this->input->post('time_update'));            $this->form_validation->set_rules("name","Tên","required");            if($info['link']!= $this->input->post('link')){                $this->form_validation->set_rules("link","Link","callback_check_link");            }            if($this->form_validation->run()==TRUE){                $arr = array(                    'name' => $this->input->post('name'),                    'keyword' => $this->input->post('keyword'),                    'info' => $this->input->post('info'),                    'link' => $this->input->post('link'),                    'content' => $this->input->post('content'),                    'is_copy' => '',                    'created' => $time,                    'updated' => $time,                );                                if (isset($_POST['images'])) {                    $this->addAttribute($id);                   }                                $this->mproduct->editById($id,$arr);                if($_POST['ok']=='back'){                    $this->session->set_flashdata('ses_flash',"Thêm");                    redirect(base_url()."admin/product/listall");                }else{                    redirect(base_url()."admin/product/edit/".$id);                }            }        }        $this->_data['template'] = 'admin/product/modify_view';        $this->_data['title'] = 'Trang Sửa User ';        $this->load->view("layout/admin",$this->_data);    }            public function generateLink(){        $this->load->helper('text');        $name = $_POST['name'];        $generate = strtolower(url_title(removesign($name,'dash',true)));        echo $generate;    }    public function image($id){        $this->_data['id'] = $id;        $this->_data['url'] =   base_url().'admin/product/upload/'.$id ;        $this->_data['template'] = 'admin/product/image';        $this->_data['title'] = 'Trang Quản Lý Hình Ảnh ';        $this->load->view("layout/upload",$this->_data);    }    public function upload($id){        $this->load->view("layout/UploadHandler",$this->_data);        $options = array(            'script_url' =>base_url().'admin/product/upload/'.$id,            'upload_dir' =>  $this->_gallery_path.'/'.$id.'/',            'upload_url' => base_url().'public/product/'.$id.'/',            'image_versions' => array(                'thumbnail' => array(                    'max_width' => 300,                    'max_height' => 180                )            )        );        $upload_handler = new UploadHandler($options,$id);        if(!isset($_GET['file'])){            $tam =  $upload_handler->getJson();            foreach($tam['files'] as $val){                $images[] = $val->name;            }        }else{            $info = $this->mproduct->getById($id);            $images = json_decode($info['image'],true);            $pos = array_search( $_GET['file'],$images);            unset($images[$pos]);        }        $data_images = json_encode($images);        $arr = array(            'image' => $data_images,            'avatar'=>0        );        $this->mproduct->editById($id,$arr);    }    private function _create_thumb($source,$path){        $this->load->library('image_lib');        $config = array(            "image_library"=>"gd2",            "source_image"=>$path.'/'.$source,            "new_image"=>$path.'/thumbnail/'.$source,            "maintain_ratio"=>TRUE,            "width"=>"300",            "height"=>"180"        );        $this->image_lib->initialize($config);        $this->image_lib->resize();        $this->image_lib->clear();    }    public static function deleteDir($dirPath) {        if (! is_dir($dirPath)) {            //  throw new InvalidArgumentException("$dirPath must be a directory");        }        if (substr($dirPath, strlen($dirPath) - 1, 1) != '/') {            $dirPath .= '/';        }        $files = glob($dirPath . '*', GLOB_MARK);        foreach ($files as $file) {            if (is_dir($file)) {                self::deleteDir($file);            } else {                unlink($file);            }        }        rmdir($dirPath);    }    public function avatar(){        $id = $_POST['id'];        $avatar = $_POST['avatar'];        $arr = array(            'avatar' => $avatar,        )   ;        $this->mproduct->editById($id,$arr);    }}